
/*! @mainpage The libatom Library
@author Morten Kjeldgaard

A description on how to use the libatom C library.
 
@section Introduction 
This document describes how to use the atom library (known as libatom)
for your own use There are three sections: introduction, descriptions
of the datastructures, description of the subroutines, and finally
some examples.

@section s_data_structures Data structures 

In libatom, a macromolecular structure exists as a hierachial
datastructure. The top level, which corresponds to the content of a
PDB file, is the <tt>Structure</tt>. Each <tt>Structure</tt> has a number
of associated <tt>Chain</tt> data strucures, each <tt>Chain</tt> has a
list of <tt>Residue</tt> data structures, and each <tt>Residue</tt> has an
associated list of <tt>Atom</tt> datastructures. This is all defined in
the C include file <tt>atom.h</tt>.

@subsection ss_structure The Structure
The <tt>Structure</tt> contains information that can be retrieved from the
header section of a PDB file, for example the dimensions of the unit
cell and the space group symbolic name. It also contains some
information which is generated by libatom, like the number of chains,
residues and atoms, and centre of gravity of the assembly of chains.
Most importantly, there are pointers to the first chain, the first
residue, and the first atom.

 @code
typedef struct Structure {
  char *name;			/* name */
  char id[5];			/* id, usually from pdbfile */
  int natoms;			/* number of atoms in asymmetric unit */
  int nhetatoms;		/* number of het atoms in asymmetric unit */
  int nres;			/* number of residues */
  int nchain;			/* number of chains */
  Point3 cg;			/* center-of-gravity */
  float rad;			/* radius from cg that includes all atoms */
  float cell[6];		/* unit cell */
  char spacegroup[12];		/* space group */
  int z;			/* molecules per asymmetric unit */
  struct Atom *atoms;		/* pointer to first atom */
  struct Residue *res;		/* pointer to first residue */
  struct Chain *chain;		/* pointer to first chain */
  struct Structure *next;	/* pointer to next structure record */
  struct index *reslist;        /* hash table, not used */
} Structure;
@endcode

@subsection ss_chain The Chain
The <tt>Chain</tt> datastructure contains information about each chain in
the structure, and a pointer to the next and previous chains. It contains a list of
residues belonging to that chain, the center of gravity and various
other information. The class field encodes different properties of the 
chain (protein, RNA, DNA, solvent, etc).

 @code
typedef struct Chain {
  char name[6];			/* name of this chain */
  char id;			/* id of this chain */
  int nres;			/* number of residues */
  int natoms;			/* number of atoms in this chain */
  int nhetatoms;		/* number of pdb style hetatoms in this chain */
  int nresins;			/* number of inserted residues */
  int naltatm;			/* number of atoms with alternate positions */
  int ic;			/* internal count number of this chain */
  Point3 cg;			/* center-of-gravity */
  float rad;			/* radius from cg that includes all atoms */
  unsigned long class;		/* class of this chain */
  Residue *res;			/* pointer to residue list */
  Atom *atoms;			/* pointer to atom list */
  struct Structure *structure;	/* pointer to whole structure */
  struct Chain *next;		/* pointer to next chain */
  struct Chain *prev;		/* pointer to previous chain */
} Chain;
@endcode

@subsection ss_residue The Residue
The <tt>Residue</tt> data structure represents one residue, and contains
informations such as the type, the name, residue number and so
on. There are pointers to the next and previous residues in the chain, 
and there are also pointers to the list of atoms, and back to the
parent chain of this residue.

 @code
typedef struct Residue {
  char name[12];		/* residue name */
  char type[6];			/* residue type */
  int resno;			/* residue number */
  char resins;			/* code for insertion of residues */
  int ic;			/* internal residue count */
  Point3 cg;			/* center-of-gravity */
  float rad;			/* radius from cg that includes all atoms */
  unsigned char naltatm;	/* number of atoms with alternate positions */
  struct Chain *chain;		/* pointer to chain */
  unsigned char natoms;		/* number of atoms in this residue*/
  struct Atom *atoms;		/* pointer to list of atoms */
  struct Atom *ca;		/* pointer to central atom */
  unsigned long flag;		/* flag to store properties of this residue */
  unsigned long class;          /* class of this residue */
  struct Residue *next;		/* pointer to next res */
  struct Residue *prev;		/* pointer to prev res */
  struct Residue *bond_next;	/* if bonded to next res, = next else null */
  struct Residue *bond_prev;	/* if bonded to prev res, = prev else null */
} Residue;
@endcode

@subsection ss_atom The Atom
The <tt>Atom</tt> data structure is the lowest level of the molecular
structure hierachy. There is one such data structure for each atom in
the input file. It contains the name and the coordinates, the B-factor 
and other relevant information. It contains a pointer to the next atom 
in the current residue, as well as a pointer back to the parent
residue data structure. The internal atom count field is and integer unique to
each atom.

 @code
typedef struct Atom {
  char name[6];			/* atom name */
  char ins;			/* insertion id */
  unsigned char z;		/* element number */
  Point3 xyz;			/* coordinate */
  float b, occ;			/* temperature factor, occupancy*/
  float *aniso;                 /* pointer to anisotropic B factor */
  int ic;			/* internal atom count */
  unsigned long flag;		/* flag to store properties of this atom */
  struct Atom *next;		/* Pointer to next atom */
  struct Atom *prev;		/* pointer to previous atom */
  struct Atom *alt;		/* ptr to alternate position(s) of this atom */
  struct Residue *res;		/* pointer to parent residue */
} Atom;
@endcode

@subsection ss_zone The Zone
A datastructure that describes a zone of residues.

 @code
typedef struct Zone {
  Chain *ch1, *ch2;		/* first and last chain   in zone */
  Residue *res1, *res2;		/*   -    -   -   residue  -  -   */
  Atom *atm1, *atm2;		/*   -    -   -   atom     -  -   */
  int nres;			/* number of residues in this zone */
} Zone;
@endcode




@section s_examples Examples

The following program reads a PDB file from standard input and outputs 
some information about the contents.

@code
#include <stdio.h>
#include "atom.h"

main (argc, argv)
     int argc;
     char **argv;
{
  FILE *f;
  Structure *s;
  Chain *chain;

  f = fdopen(0, "r");
  s = atm_read_pdbfile(f);
  fclose(f);

  atm_structure_out (s);

  chain = s->chain;
  while (chain) {
    printf ("==========")
    atm_chain_out(chain);
    chain = chain->next;
  }

  atm_delete_structure(s);
  return 0;
}
@endcode

The following bit of code shows how to run through all atoms in the structure.

 @code
  Residue *res;
  Atom *atom;

  res = chain->res;
  while (res) {
    atom = res->atom;
    while (atom) {
       // do something with each atom
       atom = atom->next;
    }
    res = res->next;
  }
@endcode

@section s_utility Utility functions

@subsection ss_math_functions Math functions 

Some of these are lifted from the Graphics Gems library. This
functions depend on data structures which are defined in
<tt>vector.h</tt>. The most important ones are:

<dt>
3d point:
 @code
typedef struct Point3Struct {	
  double x, y, z;
} Point3;
typedef Point3 Vector3;
@endcode
</dt>

<dt>3-by-3 matrix:
 @code
typedef struct Matrix3Struct {
  double element[3][3];
} Matrix3;
@endcode
</dt>
<dt>4-by-4 matrix:
 @code
typedef struct Matrix4Struct {
  double element[4][4];
} Matrix4;
@endcode
</dt>


*/
